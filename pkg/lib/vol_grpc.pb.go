// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VolClient is the client API for Vol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolClient interface {
	ListVol(ctx context.Context, in *ListVolRequest, opts ...grpc.CallOption) (*ListVolReply, error)
	CreateVol(ctx context.Context, in *CreateVolRequest, opts ...grpc.CallOption) (*CreateVolReply, error)
	RemoveVol(ctx context.Context, in *RemoveVolRequest, opts ...grpc.CallOption) (*RemoveVolReply, error)
	CloneVol(ctx context.Context, in *CloneVolRequest, opts ...grpc.CallOption) (*CloneVolReply, error)
	ExpandVol(ctx context.Context, in *ExpandVolRequest, opts ...grpc.CallOption) (*ExpandVolReply, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotReply, error)
	RemoveSnapshot(ctx context.Context, in *RemoveSnapshotRequest, opts ...grpc.CallOption) (*RemoveSnapshotReply, error)
	ListSnapshot(ctx context.Context, in *ListSnapshotRequest, opts ...grpc.CallOption) (*ListSnapshotReply, error)
}

type volClient struct {
	cc grpc.ClientConnInterface
}

func NewVolClient(cc grpc.ClientConnInterface) VolClient {
	return &volClient{cc}
}

func (c *volClient) ListVol(ctx context.Context, in *ListVolRequest, opts ...grpc.CallOption) (*ListVolReply, error) {
	out := new(ListVolReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/ListVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) CreateVol(ctx context.Context, in *CreateVolRequest, opts ...grpc.CallOption) (*CreateVolReply, error) {
	out := new(CreateVolReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/CreateVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) RemoveVol(ctx context.Context, in *RemoveVolRequest, opts ...grpc.CallOption) (*RemoveVolReply, error) {
	out := new(RemoveVolReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/RemoveVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) CloneVol(ctx context.Context, in *CloneVolRequest, opts ...grpc.CallOption) (*CloneVolReply, error) {
	out := new(CloneVolReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/CloneVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) ExpandVol(ctx context.Context, in *ExpandVolRequest, opts ...grpc.CallOption) (*ExpandVolReply, error) {
	out := new(ExpandVolReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/ExpandVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotReply, error) {
	out := new(CreateSnapshotReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/CreateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) RemoveSnapshot(ctx context.Context, in *RemoveSnapshotRequest, opts ...grpc.CallOption) (*RemoveSnapshotReply, error) {
	out := new(RemoveSnapshotReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/RemoveSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volClient) ListSnapshot(ctx context.Context, in *ListSnapshotRequest, opts ...grpc.CallOption) (*ListSnapshotReply, error) {
	out := new(ListSnapshotReply)
	err := c.cc.Invoke(ctx, "/proto.Vol/ListSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolServer is the server API for Vol service.
// All implementations must embed UnimplementedVolServer
// for forward compatibility
type VolServer interface {
	ListVol(context.Context, *ListVolRequest) (*ListVolReply, error)
	CreateVol(context.Context, *CreateVolRequest) (*CreateVolReply, error)
	RemoveVol(context.Context, *RemoveVolRequest) (*RemoveVolReply, error)
	CloneVol(context.Context, *CloneVolRequest) (*CloneVolReply, error)
	ExpandVol(context.Context, *ExpandVolRequest) (*ExpandVolReply, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotReply, error)
	RemoveSnapshot(context.Context, *RemoveSnapshotRequest) (*RemoveSnapshotReply, error)
	ListSnapshot(context.Context, *ListSnapshotRequest) (*ListSnapshotReply, error)
	mustEmbedUnimplementedVolServer()
}

// UnimplementedVolServer must be embedded to have forward compatible implementations.
type UnimplementedVolServer struct {
}

func (UnimplementedVolServer) ListVol(context.Context, *ListVolRequest) (*ListVolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVol not implemented")
}
func (UnimplementedVolServer) CreateVol(context.Context, *CreateVolRequest) (*CreateVolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVol not implemented")
}
func (UnimplementedVolServer) RemoveVol(context.Context, *RemoveVolRequest) (*RemoveVolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVol not implemented")
}
func (UnimplementedVolServer) CloneVol(context.Context, *CloneVolRequest) (*CloneVolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneVol not implemented")
}
func (UnimplementedVolServer) ExpandVol(context.Context, *ExpandVolRequest) (*ExpandVolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandVol not implemented")
}
func (UnimplementedVolServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedVolServer) RemoveSnapshot(context.Context, *RemoveSnapshotRequest) (*RemoveSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSnapshot not implemented")
}
func (UnimplementedVolServer) ListSnapshot(context.Context, *ListSnapshotRequest) (*ListSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshot not implemented")
}
func (UnimplementedVolServer) mustEmbedUnimplementedVolServer() {}

// UnsafeVolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolServer will
// result in compilation errors.
type UnsafeVolServer interface {
	mustEmbedUnimplementedVolServer()
}

func RegisterVolServer(s grpc.ServiceRegistrar, srv VolServer) {
	s.RegisterService(&Vol_ServiceDesc, srv)
}

func _Vol_ListVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).ListVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/ListVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).ListVol(ctx, req.(*ListVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_CreateVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).CreateVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/CreateVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).CreateVol(ctx, req.(*CreateVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_RemoveVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).RemoveVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/RemoveVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).RemoveVol(ctx, req.(*RemoveVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_CloneVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).CloneVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/CloneVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).CloneVol(ctx, req.(*CloneVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_ExpandVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).ExpandVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/ExpandVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).ExpandVol(ctx, req.(*ExpandVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_RemoveSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).RemoveSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/RemoveSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).RemoveSnapshot(ctx, req.(*RemoveSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vol_ListSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolServer).ListSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vol/ListSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolServer).ListSnapshot(ctx, req.(*ListSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vol_ServiceDesc is the grpc.ServiceDesc for Vol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Vol",
	HandlerType: (*VolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVol",
			Handler:    _Vol_ListVol_Handler,
		},
		{
			MethodName: "CreateVol",
			Handler:    _Vol_CreateVol_Handler,
		},
		{
			MethodName: "RemoveVol",
			Handler:    _Vol_RemoveVol_Handler,
		},
		{
			MethodName: "CloneVol",
			Handler:    _Vol_CloneVol_Handler,
		},
		{
			MethodName: "ExpandVol",
			Handler:    _Vol_ExpandVol_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _Vol_CreateSnapshot_Handler,
		},
		{
			MethodName: "RemoveSnapshot",
			Handler:    _Vol_RemoveSnapshot_Handler,
		},
		{
			MethodName: "ListSnapshot",
			Handler:    _Vol_ListSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vol.proto",
}
